信号量：
		system V 信号量
		POSIX 有名信号量
		POSIX 无名信号量
		
如果有两个或两个以上的任务（进程/线程），去访问同一个共享资源（硬件上，软件上）


eg:

	i = 5;
	
	fun()
	{
		i++;
	}
	
	
	有两个任务，调用了fun这个函数，那么请问
	i 最后的值为多少？
	
	7  =》有可能
	6  =》有可能
		这种情况如果不是有序访问，是有问题
		
		有必要保护这个共享资源，以便使他变成有序访问
		
2.信号量：	
	（Semaphore）是一种用于提供不同进程间或一个进程的不同线程间同步的手段的一种机制
	
	同步 ：有序访问
	
	信号量就是为了保护共享资源，让共享资源有序访问的一种机制
	
	
	什么时候使用信号量？
		有保护对象，才需要信号量
		保护对象？
				共享资源  《=》大家都能够访问的资源
				
				“保护” ：让这个被保护的对象被有序访问
	
3.如何保护？
		信号量机制起始就是程序设计者的一种约定，用来保护共享资源。
		进程A和进程B到要访问一个互斥设备，那么我们用一个信号量表示能不能访问这个设备
		然后每个进程访问该设备的时候，先去访问该信号量，如果他说能访问先会把该信号量设成“NO”，
		然后去访问该互斥设备，访问完该设备，在把该信号量设成“YES”
		
		
	信号量：用来表示一种共享资源的数量
	
	信号量如何实现？
		一个进程（或线程）可以在某个信号量上执行三种操作
		（1）创建（create）一个信号量。要求调用者指定信号量的初始值
				初始值就是表示该信号量保护的共享资源的，可以同时被多少个任务访问
				
				sem  => 5  表示可以由5个进程或线程去同时访问它
				sem  => 1   表示只能有1个进程或线程去同时访问它
						“互斥信号量”
						
		（2）等待（wait）一个信号量。该操作会测试这个信号量的值，如果他的值小于或等于0，那么就会
				等待（阻塞），一旦其值变得大于0，就会将它-1
				
				while(semaphore_value <= 0)
				{
					sleep();//wait
				}
				
				semaphore_value--;
				//获取到了这个信号量，访问权限
				
			p操作  :申请资源
			lock 上锁
			
		（3）释放一个信号量，该操作会将信号量的值+1
		
				semaphore_value++;
				
			V :操作 :释放一个资源
			unlock ：解锁
					
					
共享资源：多个进程或线程有可能同时访问的资源（变量，链表，文件）
		也叫做临界资源
		
	访问这些资源的代码称为临界代码，这些代码的区域称为临界区
	
	信号量保护是通过：在临界区的前面加一个P操作，然后在临界区的后面加一个V操作
	
	int a = 2;
	
	P()
	
	printf("a = %d\n",a);
	
	V()
	
	
4.信号量的实现
	
	system V 信号量
	POSIX 有名信号量
	POSIX 无名信号量	
	
	4.1 system V 信号量
		system V 信号量 =》计数信号量集（信号量数组）
					存在于内核
		
		在系统中的每一个信号量集，内核维护在一个如下的结构体中，它定义在
			<sys/sem.h>头文件中
			
			struct semid_ds
			{
			  struct ipc_perm sem_perm;		/* 操作权限 */
			  __time_t sem_otime;			/* 最后一次semop()的时间 */
			
			  __time_t sem_ctime;			/* last time changed by semctl() */
			 
			  __syscall_ulong_t sem_nsems;		/* 信号量数组中有多少个信号量 */
			 
			 struct sem*sem_base;          //sem_base指向信号量数组
			  
			};

			
			struct sem  就是表示一个system V 信号量
			struct sem
			{
				int semval;//信号量的值
				pid_t sempid;//最后一次p/v操作的进程的id
				int semncnt;//wait其增长的进程数
				int semzcnt;//wait其变为0的进程数
			};
			
		
	（1）API函数
		semget：
		NAME
       semget - get a System V semaphore set identifier

SYNOPSIS
       #include <sys/types.h>
       #include <sys/ipc.h>
       #include <sys/sem.h>

	semget：创建或打开一个system V信号量集
       int semget(key_t key, int nsems, int semflg);
			key:system V ipc对象的键值
			nsems:要创建的信号量集中的信号量的数量
					如果我们不是创建而是打开一个已经存在的信号量集，此处参数可以指定为0
					注意：一旦创建完一个信号量集，其信号量的个数就不能被改变
			
			semflg：标志位
					（1）创建
						IPC_CREAT | 权限位
						
					(2)打开
						0
			返回值：成功返回 system V信号量集的id
					失败返回-1，同时errno被设置
					
	注意：在一个新创建完的信号量集中信号量的值，是不确定的
			我们在新创建为一个信号量集后，立马指定信号量的初始值（并且只指定一次）
		
	semctl ：控制操作 （设置或获取信号量集中某个或某些信号量的值）
			
			NAME
       semctl - System V semaphore control operations

SYNOPSIS
       #include <sys/types.h>
       #include <sys/ipc.h>
       #include <sys/sem.h>

       int semctl(int semid, int semnum, int cmd, ...);
			semid:要操作的信号量集的id
			semnum：要操作的是信号量集中的哪个信号量，就是信号量数组的下标
					从0开始
			cmd:IPC_STAT 
				 IPC_SET
				 IPC_RMID：删除一个信号量集
				  GETALL  :获取这个信号量集中所有的信号量的值
				 GETVAL:获取这个信号量集中第semnum个信号量的值
				SETALL  ：设置这个信号量集中所有的信号量的值
				SETVAL   ：设置这个信号量集第semnum个信号量的值
				。。。
			
			针对不同的命令号，第四个参数不一样
			(1) cmd =  IPC_RMID，第四个参数可以不要
			
			semctl(semid, 0,IPC_RMID );
			
			(2) cmd == GETALL
				
				第四个参数的类型 ushort vals[]保存每个信号量的值
				ushort vals[5];
				
				semctl(semid, 0,GETALL, vals);
				
			（3）cmd == GETVAL
				
				不要第四个参数
				获取这个信号量集中第0个信号量的值
				int val= semctl(semid, 0,GETALL);
				
			（4）cmd == SETALL
				
				第四个参数的类型 ushort vals[]保存你要设置的每个信号量的值
				ushort vals[5] = {1,2,3,4,5};
				
				semctl(semid, 0,SETALL, vals);	
				
			(5)cmd == SETVAL
				
				要第四个参数,类型为int
				
				设置第6个的信号量值为6（下标0对应第1）
				int r = 6;
				int val= semctl(semid, 5,SETVAL,r);
			
			(6)	cmd == IPC_SET
				改变信号量集的结构体  struct semid_ds
				第四个参数的类型是结构体指针
				
				struct semid_ds buf;
				指定buf中的一些成员变量
				...
				semctl(semid, 0,IPC_SET, &buf);	
				
			(7)cmd == IPC_STAT
				第四个参数的类型是结构体指针struct semid_ds *buf
				struct semid_ds buf;
				
				semctl(semid, 0,IPC_STAT, &buf);	
				
			....

		=>自定义一个联合体
			  union semun 
			  {  =》描述第四个参数的类型
               int              val;    /* Value for SETVAL */
               struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */
               unsigned short  *array;  /* Array for GETALL, SETALL */
               struct seminfo  *__buf;  /* Buffer for IPC_INFO
                                           (Linux-specific) */
			};
			
			SETVAL:
			 union semun un;
			 un.val = 1;
			 
			 semctl(semid,2,SETVAL,un.val);
			 
			SETALL:
			 union semun un;	
			 ushort vals[5] = {12,3,4,5,6};
			 un.array = vals;
			 semctl(semid,2,SETVAL,un.array);
			 

		semop  :信号量的P/V操作
			semop
		AME
       semop, semtimedop - System V semaphore operations

SYNOPSIS
       #include <sys/types.h>
       #include <sys/ipc.h>
       #include <sys/sem.h>
	在system V信号量集中，对某个信号量的P/V操作，是用struct sembuf来描述的
	   struct sembuf
	   {
			unsigned short sem_num;  /* 数组下标，表示要P/V操作哪个信号量 */
           short          sem_op;   /* semaphore operation */
									semval = 原semval + sem_op
				
							// >0 ==0  <0  用来描述对信号量值的一种操作
									sem_op < 0  =》  -  P操作 
									sem_op > 0  =》  +  V操作
									sem_op == 0  =》会立即成功返回
											//如果IPC_NOWAIT被设置立即出错并且errno被设置为 EAGAIN
									
           short          sem_flg;  /*操作标志*/
							// 0  默认  zuse
							IPC_NOWAIT   非阻塞，不等待
								假如是P操作，能获取则获取，不能获取返回-1
								
							SEM_UNDO:
								撤销
								为了防止进程带锁退出
								设置SEM_UNDO，内核会额外记录该进程对该信号量的P/V操作，在进程退出时，自动还原
					

	   };
	   
       int semop(int semid, struct sembuf *sops, unsigned nsops);
			semid：信号量集的id
			sops:信号量p/v操作的描述数组
			nsops:第二个参数中数组元素的个数
					表示对多少个信号量进行p/v操作的描述数组
					
			返回值：成功返回0
					失败返回-1，同时errno被设置

       int semtimedop(int semid, struct sembuf *sops, unsigned nsops,
                      struct timespec *timeout);


============
	4.2 POSIX semaphore   =》单个信号量
		有名信号量  =》可以用于进程间及线程间   互斥
					在文件系统有一个入口（有一个文件名），信号量值存在于内核 
					=》既可以用于任意进程间，也可以用于线程间
					
		无名信号量  ：线程，父子进程
				没有名字，基于内存的信号量
				这个信号量仅仅存在于某个进程的地址空间  =》线程间
				如果一个无名信号量存在于进程的共享的地址空间的话  =》进程间
						（比较复杂，少用）
		
		API函数		
		（1）创建或打开一个	POSIX信号量
				
			POSIX信号量用类型sem_t来表示，不管是有名信号量还是无名信号量
			=====
			创建并初始化一个POSIX有名信号量  sem_open
			
			AME
       sem_open - initialize and open a named semaphore

SYNOPSIS
       #include <fcntl.h>           /* For O_* constants */
       #include <sys/stat.h>        /* For mode constants */
       #include <semaphore.h>

       sem_t *sem_open(const char *name, int oflag);
       sem_t *sem_open(const char *name, int oflag, mode_t mode, unsigned int value);
	   
		name:要创建或打开的POSIX有名信号量在文件系统中的路径名
				以 '/'开头的路径名  （路径名中只能有一个/）
				
				"/test.sem"
		oflag:标志位
				0  :打开
				O_CREAT  :创建
				
		mode：创建权限位，有两种方式指定
				（1）S_IWGRP
					....
				（2） 0664
				
		value:	信号量的初始值
		
		返回值：成功返回一个sem_t的指针，执行一个POSIX有名信号量
				失败返回 SEM_FAILED，同时errno被设置
		
       Link with -pthread.
	   
	   =====
		初始POSIX无名信号量  sem_init
		
		NAME
       sem_init - initialize an unnamed semaphore

SYNOPSIS
       #include <semaphore.h>
		无名信号量，需要事先分配一个sem_t的结构体指针或变量
		sem_t*s = malloc(sizeof(sem_t));
		
		or
		sem_t s;
		
       int sem_init(sem_t *sem, int pshared, unsigned int value);
	   sem:要初始化的无名信号量的地址
	   pshared：该无名信号量的共享方式
				0 ：进程内部的线程共享
						sem指向的地址是进程内部的地址
						
				非0 ：不同进程间的共享
				
					注意：如果是这种情况，要保存sem指向的空间是共享的，不同进程都可以访问到的
							
		value：信号量的初始值
		
       Link with -pthread.
	   
	   
	   （2）POSIX的P/V操作
		P 操作
			
		NAME
       sem_wait, sem_timedwait, sem_trywait - lock a semaphore

SYNOPSIS
       #include <semaphore.h>

       int sem_wait(sem_t *sem);
			sem_wait用来获取sem指向的信号量，阻塞直到获取到该信号量（返回0）或出错（返回-1，同时errno被设置）

       int sem_trywait(sem_t *sem);
			sem_trywait用来获取sem指向的信号量，不会阻塞
			能获取则获取（返回0，表示已经获取），不能获取则立马返回（返回-1，同时errno被设置）

       int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);
		sem_timedwait：限时等待
			返回值：成功返回0
					失败返回-1，同时errno被设置
					
		abs_timeout是一个绝对时间。获取当前时间（里1970-1-1经历的秒数）  +你所愿意等的时间
		
		 struct timespec {
               time_t tv_sec;      /* Seconds */
               long   tv_nsec;     /* Nanoseconds [0 .. 999999999] */
           };
		   
		   
		  eg:
			wait  5s 零 30ms
			struct timespec ts;
			clock_gettime( CLOCK_REALTIME,&ts)  //获取当前时间
			
			ts.tv_sec += 5;
			ts.tv_nsec += 30000000;
			
			
			sem_timedwait(sem,&ts);

       Link with -pthread.
		
	=========================
	V操作
	sem_post
	
	NAME
       sem_post - unlock a semaphore

SYNOPSIS
       #include <semaphore.h>

		sem_post是用来对sem指向的信号量进行V操作（释放）
       int sem_post(sem_t *sem);

	   返回值：成功返回0
				失败返回-1，同时errno被设置
				
       Link with -pthread.
	   
	   
	 ===================
	 POSIX其他操作
	 
	 ======
	 sem_getvalue:获取一个POSIX信号量的值
	 
		NAME
       sem_getvalue - get the value of a semaphore

SYNOPSIS
       #include <semaphore.h>

	   sem_getvalue使用来获取sem指向的POSIX信号量的值，保存在sval指向的内存空间
	   
       int sem_getvalue(sem_t *sem, int *sval);

		返回值：成功返回0
				失败返回-1，同时errno被设置
				
       Link with -pthread.

	========
	POSIX有名信号量  关闭和删除操作
		sem_close :关闭一个POSIX有名信号量

		
		NAME
       sem_close - close a named semaphore

SYNOPSIS
       #include <semaphore.h>

       int sem_close(sem_t *sem);
		返回值：成功返回0
				失败返回-1，同时errno被设置
				
       Link with -pthread.
==================
		sem_unlink :删除一个POSIX有名信号量
			
		NAME
       sem_unlink - remove a named semaphore

SYNOPSIS
       #include <semaphore.h>

       int sem_unlink(const char *name);

       Link with -pthread.
	   
	   
==============
	POSIX无名信号量  销毁
		sem_destroy

	NAME
       sem_destroy - destroy an unnamed semaphore

SYNOPSIS
       #include <semaphore.h>

       int sem_destroy(sem_t *sem);

       Link with -pthread.

		
		
		
		
		
		