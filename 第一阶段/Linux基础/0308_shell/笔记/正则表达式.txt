正则表达式
	字符串是计算机中应用最广泛的处理对象
	字符串的组合规则多种多样的
		数字字符串
		email地址字符串
		IP地址字符串
		...
		
		计算机要处理这些字符串，首要要用某种语言去描述这些字符串组合的规则
		
		=》正则表达式
		
	
2.正则表达式的规则
	
	正则表达式是描述某种规则字符串的表达式
	
		十进制数字字符串
		
		[0-9]+  
		
	在正则表达式中的字符， 分为两种
		（1）普通字符 ：只代表本身
		（2）元字符 ：有特定含义的字符（不代表本身）
		
	正则表达式中的元字符
		.  匹配任意单个字符 
		[] 字符组。可以由多个字符构成，但它任然值匹配单个字符，
		字符组能够匹配的单个字符，都[]列举出来
		
		[] 字符组也可有一个元字符 -
			-在[] 用于表示连续的ASCII字符
			
		用正则表达式，来描述一个字符，这个字符要么是字母，要么数字，要么是下划线
		
			[a-zA-Z0-9_]
			
		[^] 排除字符组  匹配单个字符，除[] 的所有单个字符
		
		ls /etc  | grep [^0-9]sa
		
		匹配数组字符   [0-9]   <=> \d
		匹配非数组字符   [^0-9]   <=> \D
		
		匹配数字、字母  [a-zA-Z0-9]  <=>\w
		匹配非数字、字母  [^a-zA-Z0-9]  <=>\W
		
		\n  \r  \t  \v  \f
		
		匹配多个字符
			+  匹配一个或多个先前字符(模式)
			
				[0-9]+
				[0-9]
				[0-9][0-9][0-9]
				....
				
			*  匹配0个或多个先前字符(模式)
			
				9*
					空字符串
					9
					99
					...
					
				[0-9]*
					空字符串
					[0-9]
					[0-9][0-9]
					.....
					
			.*  ：
				空串
				任意字符串
				
			?  匹配0个或1个先前字符
				9?
					空串
					9
				[0-9]?
				
			{数字}匹配固定数字的字符（模式）
				9{3}
					999
					
			{最小数目，最大数目}
				
				匹配至少最小数目，至多最大数目的字符串
					[0-9]{1,5}
					
			
			()  作为一个整体，字模式
				(abc){1,3}
				
				(abc)+
				
			(|)  二选一
				(abc | 123) {2}
					=> (abc|123)(abc|123)
					
		^  :行首定位符
			^as
				第一个字母必须为a，第二个字母必须为s
				
		$  :行尾的定位符
			conf$
			
		转义字符：
			\
			\.  代表一个普通 .
			\*  代表一个普通 *
			
			...
			
		基本的正则表达式（BRE）
			^		echo `ls /etc | grep ^pa`
			$		echo `ls /etc | grep conf$`
			. 		echo `ls /etc | grep samba.`
			*    	echo `ls /etc | grep ^sss*`  *号前面的字符出现0次或更多次
			[]      echo `ls /etc | grep ^rc[0-9]`
			[^]     echo `ls /etc | grep ^rc[^0-9]`
			
			....
			
		扩展的正则表达式
			+	 echo `ls /etc | egrep ^sss+`  +号前面的字符至少出现1次
			?	echo `ls /etc | egrep ^sss?`   ?号前面的字符至多出现1次
			|  或  expr1 | expr2 | expr3....
			()
				echo `ls /etc | egrep "(ssh|ssl|^pa)"`
				
		Perl 正则表达式
			\d   [0-9]
				echo `ls /etc | grep -P "^rc\d"`
				
			\D
			\w
			\W
			\s   =>空白字符的匹配  [\f\t\v\n\r]
			\S   =>非空白字符的匹配
			
				
		在一个目录下，查找所有源代码文件
			*.c
			*.h
			*.cpp
			*.hpp
			
			
			find ./  -regex ".*\.[ch]\(pp\)?"
			
		用正则表达式去描述这个IP字符串	
		192.168.3.185
		
		"[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"
				
		标准C库中是没有正则表达式相关的函数，一般在C中使用正则表达式库
			POSIX C正则库
			Perl正则库
		
		POSIX  regex functions

			regcomp/regexec/regerror/regfree
			
		NAME
       regcomp, regexec, regerror, regfree - POSIX regex functions

SYNOPSIS
       #include <sys/types.h>
       #include <regex.h>
		
		regcomp用来编译正则表达式，编译好的正则表达式用类型regex_t来表示
		
       int regcomp(regex_t *preg, const char *regex, int cflags);
			preg：指向的地址空间，就是用来保存编译好的正则表达式
			regex：指向原始待编译的正则表达式
			cflags：位域实现
					REG_EXTENDED :用扩展的正则表达式语法
              

					REG_ICASE：忽略大小写
              

					REG_NOSUB：不包含子模式
            
			返回值：成功返回0
					失败返回一个错误码，该错误码需要调用regerror去解析
		
			用来匹配正则表达式的所描述的模式
			匹配结果是用regmatch_t来描述，返回的是在母串中匹配到的下标范围（起始下标和结束下标）
				  typedef struct {
								regoff_t rm_so;//起始下标
								regoff_t rm_eo;//结束下标
							} regmatch_t;

			
       int regexec(const regex_t *preg, const char *string, size_t nmatch,
                   regmatch_t pmatch[], int eflags);
				preg ：编译好的正则表达式
				string：待查找的字符串
				nmatch:有多少个模式
						总模式（1）+子模式个数
				
				pmatch：模式匹配信息数组
						数组元素个数nmatch
						
				eflags：标志表示是否匹配到行首或行尾。 一般为0
				
			返回值：如果成功（匹配到了）返回0
					失败返回REG_NOMATCH
				   
				   

       size_t regerror(int errcode, const regex_t *preg, char *errbuf,
                       size_t errbuf_size);

			errcode：错误码	
			preg：正则表达式
			errbuf：指向一段内存，用来保存转化后的错误信息
			errbuf_size:errbuf的大小
			
			
			返回值：返回填充到errbuf的错误信息的长度
			
			
       void regfree(regex_t *preg);
			用来释放preg所指向的空间
			
					
			
		gfyuewgfyu192.168.3.1fuwegfuiwe	192.168.2.3		
					
		