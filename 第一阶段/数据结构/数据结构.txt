数据结构
	数据 ：是对客观事物的符号表示，在计算机中是指所有能够输入到计算机中并被计算机程序
		处理的符号的总称
		
	数据元素：是数据的基本单元，在计算机中程序中通常作为一个整体进行考虑和处理
	
	一个数据元素可由若干个数据项组成。数据项是数据的不可分割的最小单位
	
	数据对象：是性质相同的数据元素的组合（集合），是数据的一个子集
	
	
	数据结构：数据，数据与数据之间的关系
		结构：数据元素之间关系的不同特性，称为结构
			数据元素之间关系的不同特性，通常有以下4类结构
			
			（1）集合    结构中的数据元素除了 “同属于一个集合”的关系以外
						别无其他关系
						
			（2）线性结构 
						数据元素之间的关系是线性的
						
			（3）树形结构
						数据元素之间的关系是层次关系（树状）
						
			（4）网状结构
						图论
						
	数据结构的形式定为：一个二元组
		Data_structure = (D,S);
			D :是数据元素的有限集
				S：是D上面关系的有限集
		
		结构定义中 ：“关系” 描述的数据元素之间的逻辑关系，因此又称为数据的逻辑结构
		
			数据结构在计算机中的表示称为数据的物理结构，又称为存储结构
			
		
数据结构：研究数据本身，以及数据与数据之间的关系（逻辑关系）


		
线性表：
	eg:
		
						数据元素				数据元素之间的关系	
						
		26个英文字母 	单个字母				A必须在B的前面，B必须在C的前面...	
		  
		45,25,36,37     每个班级的人数		    45必须在25的前面	

		
	"线性表"中的数据元素可以是各种各样的类型，但是同一线性表中的元素必定具有相同的特性的
	即属于同一数据对象，相邻数据元素之间存在序偶关系。
	若将线性表记为：
		（a1,a2,........an）
		
		(1)存在着唯一一个被称为“第一个”的数据元素
		(2)存在着唯一一个被称为“最后一个”的数据元素
		(3)除了第一个外，集合中的每个数据元素有且仅有一个前驱元素
		(4)除了最后一个外，集合中的每个数据元素有且仅有一个后驱元素
	
		
（1 3 5 7 9）
	上面这一个是线性表，在计算机中如何保存？
		要保存什么东西？
		（1）保存数据
		（2）关系要保存
			逻辑关系
				
				
	线性表的物理结构实现
	
	（1）顺序结构  =》数组
		线性表的顺序结构指的是用一组地址连续的存储单元一次存储线性表中数据元素
			
			数据保存啦
			“逻辑关系” 也保存啦
			
			逻辑关系和物理地址关系是一致的
			
		操作：
			增
			删
			改
			查
			
	（2）链式结构  =》链表
		线性表的链式结构指的不用地址连续的存储单元来保存数据元素
		数据元素的存储单元不一定是连续，在保存数据元素的同时，需要
		额外开辟一块空间来保存“逻辑关系”上的上一个或下一个
		
		typedef int  ElemType;
		struct node
		{
			ElemType data;//数据域 =》保存数据
			struct node*next;//指针域  =》保存逻辑关系上的下一个的地址
		};
		
		
		基本操作：
			增
			删
			改
			查
		
		练习：
			在一个单链表f中找到值为x的数据节点，将其值改为y。如果有多个值为x的节点，
			改找到的第一个节点，若没有，不需要改
			返回新链表的首节点的地址
			
			struct node*Change_xnode(struct node*f,int x,int y)
			{
				//step1:找到值为x的节点
				
				//step2：修改
			}
			
		增加：
			在一个单链表f中找到值为x的数据节点，在其前面增加一个值为y的数据节点。
			如果有多个值为x的节点，就在找到的第一个节点前面增加，若没有，就加在最后。
			返回新链表的首节点的地址
			
			struct node*add_a_node(struct node*f,int x,int y)
			{
				//step1:开辟新的数据节点的空间，并赋值
				
				
				//step2:找到值为x的节点
				
				
				//step3:加入
					找到
					
					
					未找到
			}
			
		删除：
			在一个单链表f中找到值为x的数据节点，将其删除
			如果有多个值为x的节点，就删除找到的第一个节点，若没有，不删除。
			返回新链表的首节点的地址
			struct node*delete_x_node(struct node*f,int x)
			{
				struct node*p = f;
				//step1:找到值为x的节点
				
				
				//step2:删除（找到了）
				
			}
			
作业：
	1.
		删除：
		在一个单链表f中找到值为x的数据节点，将其删除
		如果有多个值为x的节点，就全部删除，若没有，不删除。
		返回新链表的首节点的地址
		
	2.将一个链表排序（升序）
	
	
	
	3.创建一个升序链表
	
	4.归并两个有序链表（升序）
		将两个升序链表合成一个升序链表
		
		a:  1 3 5 7 9
		b : 1 2 3 4 5 
		
		1 1 2 3 3 4 5 5 7 9
		
		
	比如现在有一个单链表，我想直到这个链表的节点个数
		怎么做？
		
	带头节点的链表
		
		头节点：用来管理和唯一标识这个链表的
		
	typedef int  ElemType;
	struct node
	{
		ElemType data;//数据域 =》保存数据
		struct node*next;//指针域  =》保存逻辑关系上的下一个的地址
	};
	struct LinkedList
	{
		struct node*first;//指向链表中的第一个节点
		struct node*last;//指向链表中的最后一个节点
		int num;
		char name[32];
		//....
	};
	
	
	增：
		在一个带头节点的单链表list中找到值为x的数据节点，在其前面增加一个值为y的数据节点。
			如果有多个值为x的节点，就在找到的第一个节点前面增加，若没有，就加在最后。
			返回新链表头节点的地址
		
	删:
		在一个带头节点的单链表list中找到值为x的数据节点，将其删除
		如果有多个值为x的节点，就全部删除，若没有，不删除。
		返回新链表的首节点的地址
		
		
	
	练习：	
		在一个带头节点的单链表list中找到倒数第k个节点，将其节点的地址返回
	
		struct node*func(struct LinkedList*list,int k)
		{
			
		}	


		带头节点的双向链表
		typedef int  ElemType;
		struct node//数据节点
		{
			ElemType data;//数据域 =》保存数据
			struct node*next;//指针域  =》保存逻辑关系上的下一个的地址
			struct node*prev;//指针域  =》保存逻辑关系上的上一个的地址
		};
		struct LinkedList//头结点
		{
			struct node*first;//指向链表中的第一个节点
			struct node*last;//指向链表中的最后一个节点
			int num;
			char name[32];
			//....
		};
		
		增：
		在一个带头节点的双向链表list中找到值为x的数据节点，在其前面增加一个值为y的数据节点。
			如果有多个值为x的节点，就在找到的第一个节点前面增加，若没有，就加在最后。
			返回新链表头节点的地址
			
		struct LinkedList*add_x_node(struct LinkedList*list,ElemType x,int y)
		{
			
		}		
		
		删:
		在一个带头节点的双向链表list中找到值为x的数据节点，将其删除
		如果有多个值为x的节点，就全部删除，若没有，不删除。
		返回新链表头节点的地址
		
		struct LinkedList*delete_all_xnode(struct LinkedList*list,ElemType x)
		{
			
		}
		
		
练习：	
	1.链表中存的是整数，有正有负，写个函数把链表list中的负数放在正数前面
		struct LinkedList*FUNC(struct LinkedList*list)
		{
			
		}
	
	2.创建一条升序的带头节点的双向链表(必做)

作业：	
	3.链表A,B.判断A 是否为B的子序列
		子序列：连续的一部分
		
		A :1 3 5 5 5
		
		B : 1 3 5 5 1 3 5 5 5 6
		
	4：求两个升序链表的交集。A，B都有的元素
	把交集组成一个新链表C，原链表A,B保持不变,且C也要升序
	
	A ：1 2 3 3 3 45
	B : 2 3 3 4 5
	C  :2 3
		